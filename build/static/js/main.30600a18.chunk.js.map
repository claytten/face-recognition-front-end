{"version":3,"sources":["Components/FaceRecognition/FaceRecognition.js","Components/Link/ImageLinkForm.js","Container/App.js","serviceWorker.js","index.js"],"names":["FaceRecognition","_ref","imageUrl","boxes","react_default","a","createElement","className","id","alt","src","width","heigh","map","box","key","topRow","style","top","right","rightCol","bottom","bottomRow","left","leftCol","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","app","Clarifai","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculateFaceLocation","data","image","document","getElementById","Number","height","outputs","regions","face","clarifaiFace","region_info","bounding_box","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","_this$state","particles_default","params","Components_Link_ImageLinkForm","Components_FaceRecognition_FaceRecognition","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Container_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.30600a18.chunk.js","sourcesContent":["import React from 'react';\n// import Face from './Face';\nimport './FaceRecognition.css';\n\nconst FaceRecognition = ({ imageUrl, boxes }) => {\n\t// const faceBox = ({Box}) => {\n\t// \treturn Box.map( (user,i) => {\n\t// \t\treturn (\n\t// \t\t\t<Face\n\t// \t\t\t\tkey={Box[i]}\n\t// \t\t\t\tTop={Box[i].topRow}\n\t// \t\t\t\tRight={Box[i].rightCol}\n\t// \t\t\t\tBottom={Box[i].bottomRow}\n\t// \t\t\t\tLeft={Box[i].leftCol}\n\t// \t\t\t/>\n\t// \t\t);\n\t// \t});\n\t// }\n\t// console.log(faceBox);\n\n\t\n\treturn (\n\t\t<div className='center centered'>\n\t\t\t\t<div className='absolute center mt2'>\n\t\t        <img id='inputimage' alt='' src={imageUrl} width='500px' heigh='auto'/>\n\t\t        {boxes.map(box => {\n\t\t        return <div key={box.topRow} className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\n\t\t      \t})\n\t\t      \t}\n\t\t      </div>\n\t\t</div>\n\t);\n}\n\nexport default FaceRecognition;","import React from 'react';\nimport './ImageLinkForm.css';\n\nconst ImageLinkForm = ({onInputChange , onButtonSubmit}) => {\n\treturn (\n\t\t<div>\n\t\t\t<p className='f4 tc'>\n\t\t\t\t{'Put some link image from the internet and let see what happen'}\n\t\t\t</p>\n\t\t\t<div className='pa4 br3  form center shadow-5 '>\n\t\t\t\t<input type='text' className='tc f4 pa2 w-70' onChange={onInputChange} />\n\t\t\t\t<button \n\t\t\t\t\tclassName='w-30 grow f4 link ph3 pv2 dib white bg-light-purple pointer' \n\t\t\t\t\tonClick={onButtonSubmit}\n\t\t\t\t>Detect</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ImageLinkForm;","import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from '../Components/FaceRecognition/FaceRecognition';\nimport ImageLinkForm from '../Components/Link/ImageLinkForm';\nimport './App.css';\n\n\nconst app = new Clarifai.App({\n apiKey: 'b68eb119dd234c2892a741d56d9dd7a4'\n});\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 170,\n      density: {\n        enable: true,\n        value_area: 700\n      }\n    }\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      boxes: []\n    }\n  }\n\n  calculateFaceLocation = (data) => {\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n  return data.outputs[0].data.regions.map(face => {\n      const clarifaiFace = face.region_info.bounding_box;\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - (clarifaiFace.right_col * width),\n        bottomRow: height - (clarifaiFace.bottom_row * height)\n      }\n    });\n  }\n\n  displayFaceBox = (boxes) => {\n    this.setState({boxes: boxes});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input});\n    app.models\n      .predict (\n        Clarifai.FACE_DETECT_MODEL,\n        this.state.input)\n      .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\n      .catch(err => console.log(err))\n  }\n\n\n  render() {\n    const { imageUrl, boxes } = this.state;\n    return (\n      <div className=\"App\">\n         <Particles className='particles'\n          params={particlesOptions}\n        />\n        <ImageLinkForm\n          onInputChange={this.onInputChange}\n          onButtonSubmit={this.onButtonSubmit}\n        />\n        <FaceRecognition boxes={boxes} imageUrl={imageUrl} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}